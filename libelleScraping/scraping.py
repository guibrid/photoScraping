# SCRAPING PHOTOS FROM OPENFOODFACTS WEBSITE
# https://www.youtube.com/watch?v=4UcqECQe5Kc&t=0s&list=WL&index=8


import requests
from bs4 import BeautifulSoup
from csv import writer
import mysql.connector


cnx = mysql.connector.connect(user='root', password='',
                              host='localhost',
                              database='cake_crmsci')
cursor = cnx.cursor()

#query = ("SELECT gencod, id, title FROM products WHERE id BETWEEN 941 AND 1000")
query = ("SELECT gencod, id, title FROM products WHERE active=1 AND (LENGTH(`title`))<15")
#query = ("SELECT gencod, id, title FROM products WHERE active = 1  AND code IN ('4184', '5542', '21438', '24084', '26255', '28271', '35961', '37935', '39478', '39762', '42123', '52475', '52808', '55247', '55306', '58987', '59001', '69529', '74563', '94406', '103301', '105346', '107477', '107478', '109165', '109893', '109907', '109948', '113786', '113792', '113810', '114265', '122106', '123752', '128181', '128183', '130681', '137324', '139821', '140035', '140206', '140662', '141822', '143595', '144326', '144341', '144842', '145150', '145621', '148904', '149115', '152745', '161624', '161787', '161813', '168615', '168754', '169972', '171254', '173248', '174087', '174176', '180844', '181321', '181354', '186677', '186695', '186710', '186956', '189371', '190951', '191691', '193829', '196808', '198043', '201598', '204211', '205429', '206120', '208472', '208565', '210405', '211128', '215500', '215681', '215823', '216344', '216472', '216495', '216782', '217772', '218759', '219088', '220071', '221717', '225005', '229583', '229612', '229957', '230362', '231073', '231589', '231593', '231676', '231687', '232651', '232676', '232752', '233801', '234442', '236112', '236226', '236652', '237135', '237639', '237655', '238155', '238157', '238159', '238170', '238549', '239022', '243346', '243434', '243559', '245034', '245139', '245529', '245906', '245925', '246655', '248266', '248428', '248838', '249981', '250583', '250961', '251074', '251541', '251551', '251670', '252053', '254268', '254387', '256231', '256240', '259972', '261589', '261590', '261591', '261592', '261600', '264422', '264435', '264501', '264506', '264528', '264542', '265232', '265387', '265953', '265965', '266753', '266761', '267970', '269184', '269203', '269204', '269208', '269214', '269216', '269217', '269256', '270095', '270102', '270282', '270316', '270626', '270657', '270686', '270704', '270715', '270757', '271480', '272362', '272576', '272618', '272732', '273073', '273098', '273129', '273153', '274685', '275221', '275977', '276123', '276231', '278482', '280529', '280979', '281171', '282571', '282807', '283589', '284907', '285788', '286225', '286256', '286308', '287290', '290986', '290992', '291010', '291142', '291648', '291720', '291845', '291875', '291880', '291979', '292125', '293370', '293375', '294440', '294526', '294625', '294635', '296496', '296648', '296662', '296663', '297255', '297356', '297416', '297484', '297507', '297508', '297530', '297531', '297569', '297585', '297590', '297591', '297593', '297888', '297899', '297950', '298476', '299694', '299819', '299820', '300185', '300220', '300222', '300225', '300264', '301038', '302246', '302464', '302576', '302709', '302783', '302786', '303444', '305375', '305464', '306004', '306530', '306543', '306707', '306797', '307000', '308643', '308901', '309025', '309044', '309047', '309056', '309120', '309993', '310143', '311989', '313329', '313334', '313337', '313338', '313351', '313367', '313389', '313421', '313431', '313433', '313446', '313447', '313448', '313449', '313491', '313593', '313624', '313626', '313627', '313655', '313679', '313680', '313701', '313715', '313723', '313725', '313728', '313745', '313763', '314005', '314053', '314061', '314065', '314136', '315525', '316338', '318257', '318303', '318317', '318362', '318367', '319186', '319191', '320270', '320477', '320621', '321288', '321300', '324205', '324212', '325083', '327926', '328014', '329384', '329768', '329901', '329919', '333226', '334907', '335306', '336452', '337169', '337360', '337368', '339745', '339781', '340142', '340794', '340846', '340880', '341621', '342431', '344180', '345472', '345496', '355258', '356606', '356607', '357947', '360589', '364952', '367862', '368614', '370162', '370586', '376471', '385308', '387233', '397406', '401329', '415681', '422053', '424179', '455715', '455723', '456578', '486669', '500491', '502894', '520925', '526541', '527166', '527984', '535029', '536561', '540204', '540209', '540214', '545024', '545714', '548423', '562873', '566260', '569359', '587077', '594411', '601746', '609461', '617423', '617506', '622121', '653087', '657480', '657762', '663392', '667262', '667465', '667483', '676659', '680481', '688069', '689713', '714822', '721537', '721887', '732749', '739159', '739472', '743368', '745405', '748283', '765460', '780256', '780404', '787595', '788652', '795094', '800406', '801212', '818118', '819879', '825097', '827151', '828015', '832355', '838905', '840358', '841724', '848667', '860574', '868988', '868989', '869001', '872693', '882367', '890232', '910860', '917527', '923833', '929992', '933221', '937591', '939444', '939476', '947175', '947317', '947400', '947403', '947415', '962220', '963384', '963576', '965540', '968386', '968744', '972387', '973933', '974573', '975489', '976403', '989060', '992959', 'F54287', 'H03731', 'H89511', 'I70734', 'I71299', 'J02340', 'J49886', 'J70564', 'J72769', 'J81586', 'J95688', 'J96245', 'J96246', 'J96275', 'J97015', 'J97271', 'K09115', 'K12970', 'K19632', 'K19835', 'K20262', 'K20343', 'K30224', 'K30226', 'K31527', 'K32754', 'K33929', 'K33989', 'K34505', 'K34656', 'K37492', 'K38695', 'K41275', 'K41483', 'K43892', 'K50793', 'K51452', 'K52786', 'K52788', 'K53454', 'K55451', 'K55453', 'K55662', 'K57800', 'K58121', 'K58122', 'K61139', 'K61140', 'K61687', 'K62382', 'K62416', 'K62663', 'K65023', 'K65040', 'K65041', 'K65042', 'K65043', 'K65046', 'K65047', 'K65050', 'K65186', 'K65221', 'K66468', 'K66656', 'K68234', 'K68905', 'K70677', 'K71371', 'K73096', 'K73176', 'K73830', 'K73869', 'K73917', 'K75607', 'K75618', 'K75622', 'K77532', 'K77549', 'K77965', 'K78959', 'K79276', 'K80057', 'K80432', 'K80692', 'K81000', 'K81951', 'K83176', 'K84125', 'K84760', 'K84769', 'K84805', 'K86114', 'K86115', 'K86925', 'K86927', 'K86930', 'K87567', 'K87730', 'K88319', 'K88566', 'K89052', 'K89065', 'K89719', 'K89949', 'K90568', 'K90574', 'K94039', 'K94063', 'K94071', 'K94164', 'K94328', 'K95067', 'K96256', 'K96260', 'K96367', 'K96376', 'K96382', 'K96390', 'K96391', 'K96392', 'K96397', 'K96398', 'K97881', 'K97889', 'L06764', 'L10292', 'L10293', 'L11821', 'L12187', 'L13628', 'L16228', 'L16242', 'L16525', 'L16526', 'L17656', 'L17850', 'L18366', 'L19682', 'L20395', 'L20496', 'L20508', 'L20525', 'L20528', 'L20533', 'L22954', 'L22975', 'L23170', 'L24399', 'L24403', 'L24405', 'L24419', 'L25861', 'L25872', 'L25891', 'L26181', 'L26693', 'L26771', 'L26879', 'L27044', 'L27045', 'L27046', 'L27185', 'L27194', 'L27304', 'L28135', 'L28200', 'L28203', 'L28204', 'L28206', 'L28394', 'L28405', 'L28406', 'L28578', 'L28579', 'L28580', 'L28658', 'L28659', 'L28669', 'L28883', 'L29577', 'L29590', 'L29660', 'L29731', 'L30353', 'L30354', 'L31902', 'L31910', 'L31920', 'L32592', 'L32869', 'L32870', 'L32871', 'L32872', 'L33308', 'L33343', 'L33346', 'L33347', 'L33348', 'L33356', 'L33357', 'L33358', 'L33359', 'L33361', 'L33373', 'L34036', 'L34281', 'L34601', 'L34797', 'L34845', 'L34933', 'L35019', 'L35128', 'L35373', 'L35479', 'L35698', 'L36086', 'L36128', 'L36238', 'L36287', 'L36898', 'L36996', 'L37035', 'L37036', 'L37092', 'L37162', 'L37179', 'L37180', 'L37269', 'L37270', 'L37274', 'L37277', 'L37278', 'L37288', 'L37327', 'L37339', 'L37668', 'L37722', 'L37919', 'L37981', 'L38067', 'L38339', 'L38434', 'L38556', 'L38599', 'L38634', 'L38663', 'L38664', 'L38665', 'L38667', 'L38668', 'L38680', 'L38683', 'L38718', 'L38968', 'L38969', 'L39024', 'L39028', 'L39052', 'L39117', 'L39168', 'L39307', 'L39610', 'L39634', 'L39637', 'L39880', 'L39907', 'L39908', 'L39926', 'L40120', 'L40745', 'L40746', 'L40782', 'L40783', 'L40787', 'L40788', 'L40861', 'L40976', 'L40985', 'L40987', 'L40988', 'L40993', 'L41651', 'L41752', 'L41755', 'L41756', 'L41757', 'L41758', 'L41765', 'L41766', 'L41767', 'L41810', 'L41821', 'L41837', 'L41952', 'L41964', 'L41969', 'L41970', 'L41972', 'L41973', 'L41974', 'L41975', 'L41977', 'L41983', 'L42010', 'L42058', 'L42109', 'L42111', 'L42116', 'L42170', 'L42171', 'L42173', 'L42177', 'L42312', 'L42380', 'L42384', 'L42538', 'L42702', 'L42774', 'L42776', 'L42964', 'L42982', 'L43047', 'L43132', 'L43154', 'L43189', 'L43215', 'L43222', 'L43253', 'L43270', 'L43293', 'L43294', 'L43342', 'L43357', 'L43389', 'L43431', 'L43593', 'L43605', 'L43620', 'L43633', 'L43634', 'L43639', 'L43640', 'L43669', 'L43670', 'L43682', 'L43818', 'L43824', 'L43873', 'L43909', 'L43910', 'L43965', 'L43986', 'L44095', 'L44151', 'L44154', 'L44541', 'L45096', 'L45127', 'L45503', 'L45987', 'L46075', 'L46402', 'L46508', 'L46592', 'L46790', 'L46796', 'L46920', 'L47253', 'L47684', 'L47948', 'L47973', 'L48078', 'L48123', 'L48125', 'L48193', 'L48201', 'L48236', 'L48573', 'L48634', 'L49085', 'L49444', 'L49445', 'L49472', 'L49494', 'L49495', 'L49496', 'L49549', 'L49574', 'L49624', 'L49626', 'L50026', 'L50305', 'L50495', 'L50498', 'L50560', 'L50569', 'L50752', 'L50753', 'L50992', 'L51703', 'L51931', 'L51933', 'L51934', 'L51935', 'L51936', 'L52188', 'L52930', 'L53218', 'L53315', 'L53316', 'L53343', 'L53344', 'L53345', 'L53346', 'L53347', 'L53348', 'L53351', 'L53353', 'L53354', 'L53355', 'L53356', 'L53357', 'L53365', 'L53366', 'L55151', 'L55415', 'L56992', 'L57065', 'L57079', 'L57114', 'L57130', 'L58452', 'L58453', 'L58454', 'L58779', 'L59395', 'L59674', 'L59699', 'L59700', 'L59701', 'L59738', 'L59757', 'L59973', 'L59975', 'L59976', 'L59978', 'L60295', 'L60296', 'L60460', 'L60462', 'L60538', 'L60544', 'L60557', 'L60570', 'L60591', 'L60711', 'L60712', 'L60713', 'L60714', 'L61096', 'L61148', 'L61150', 'L61868', 'L63168', 'L63184', 'L63890', 'L66483', 'L66955', 'L69389')")
cursor.execute(query)
rows = cursor.fetchall()

with open('libelles.csv', 'a', newline='', encoding='utf-8') as csv_file:
    csv_writer = writer(csv_file, delimiter='|')
    #headers = ['id', 'Libelle', 'Libelle Scrap']
    #csv_writer.writerow(headers)

    for article in rows:

        try:
            response = requests.get('https://world.openfoodfacts.org/product/'+str(article[0])+'/')

            soup = BeautifulSoup(response.text, 'html.parser')
            imageUrl = soup.find(id='drop_front_fr')
            myh1 = soup.h1.text
            #if(imageUrl):
            #    print(imageUrl.get('about'))
            #    csv_writer.writerow([str(article[1]), imageUrl.get('about')])
            if(myh1):
                
                print(myh1)
                csv_writer.writerow([str(article[1]), str(article[2]), myh1])

        except requests.exceptions.Timeout:
            print('Timeout')
            csv_writer.writerow([str(article[1]), 'Timeout'])

cursor.close()
cnx.close()